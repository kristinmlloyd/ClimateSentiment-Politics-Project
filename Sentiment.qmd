---
title: "Untitled"
format: html
---

```{python}

import pandas as pd

df = pd.read_csv("Climate3.0 - President.csv")

print(df.head())


```

```{python}

from transformers import AutoModelForSequenceClassification, AutoTokenizer, pipeline
import torch

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

model_name = "climatebert/distilroberta-base-climate-sentiment"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name)
model.to(device)

sentiment_pipeline = pipeline(
    "sentiment-analysis",
    model=model,
    tokenizer=tokenizer,
    device=0 if torch.cuda.is_available() else -1
)

df = pd.read_csv("Climate3.0 - President.csv")

def get_sentiment(text):
    if pd.isna(text) or text.strip() == "":
        return "neutral", 0.0  
    result = sentiment_pipeline(text)
    return result[0]['label'], result[0]['score']

df[['Sentiment', 'Score']] = df['Content'].apply(lambda x: pd.Series(get_sentiment(str(x))))

output_file = 'Climate3.0_sentiment_results.csv'
df.to_csv(output_file, index=False)
print(f"Sentiment analysis completed and saved to '{output_file}'")

```

```{python}

sentiment_counts = df['Sentiment'].value_counts()
print("\nSentiment Counts:")
print(sentiment_counts)

risk_count = sentiment_counts.get('risk', 0)
neutral_count = sentiment_counts.get('neutral', 0)
opportunity_count = sentiment_counts.get('opportunity', 0)

print(f"\nNumber of 'risk': {risk_count}")
print(f"Number of 'neutral': {neutral_count}")
print(f"Number of 'opportunity': {opportunity_count}")

```


